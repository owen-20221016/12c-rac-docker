# Prepare docker host and create supporting containers (bind, dhcpd, nfs)


##########################################################################################
#############  Prepare ASM block and file devices
##########################################################################################

    - block:
        - name: Create ASM file devices, skips any block devices
          file:
            state: touch
            path: "{{ item.1.path }}"
          become: True
          with_subelements:
            - "{{ asm_disk_groups }}"
            - disks
          when: item.1.type == "file"
          register: asm_disk_files
          tags:
            - create_asm_files

        
        - name: Inflate ASM file devices, only if they have not already been inflated
          # dd if=/dev/zero of=/oraclenfs/asm-clu-121-NDATA-disk1 bs=1024k count=2000
          # dd if=/dev/zero of=/oraclenfs/asm-clu-121-NDATA-disk2 bs=1024k count=2000
          # dd if=/dev/zero of=/oraclenfs/asm-clu-121-NDATA-disk3 bs=1024k count=2000
          command: "dd if=/dev/zero of={{ item.dest }} bs=1024k count=2000"
          become: True
          with_items:
            - "{{ asm_disk_files.results }}"
          when: ( item.changed == true ) and ( item.state == 'file' ) and ( item.size == 0 )
          tags:
            - inflate_asm_files
      tags:
        - asm_files
        - asm


    - name: Set permissions and ownership on ASM file devices
      # chown 54421 /oraclenfs/asm*
      # chgrp 54422 /oraclenfs/asm*
      # chmod g+w /oraclenfs/asm*
      file:
        state: file
        path: "{{ item.1.path }}"
        owner: "{{ operating_system.grid_infrastructure.users | selectattr('title', 'equalto', 'owner') | map(attribute='uid') | first }}"
        group: "{{ operating_system.grid_infrastructure.groups | selectattr('title', 'equalto', 'osasm') | map(attribute='gid') | first }}"
        mode: 0660
      become: True
      with_subelements:
        - "{{ asm_disk_groups }}"
        - disks
      when: item.1.type == "file"
      tags:
        - check_asm_files
        - asm_files
        - asm


    - name: Check that ASM block devices exist, skips any file devices
      stat:
        path: "{{ item.1.rawpath }}"
      with_subelements:
        - "{{ asm_disk_groups }}"
        - disks
      when: item.1.type == "block"
      tags:
        - check_asm_blocks
        - asm_blocks
        - asm


##########################################################################################
#############  Create docker networks
##########################################################################################

    - name: Create Docker networks
      # docker network create --subnet=10.10.10.0/24 pub
      # docker network create --subnet=11.11.11.0/24 priv
      docker_network:
        name: "{{ item.name }}"
        appends: True
        state: present
        ipam_options:
          subnet: "{{ item.subnet }}/{{ item.cidr }}"
      with_items:
        - "{{ docker.networks }}"
      tags:
        - create_docker_networks


##########################################################################################
#############  Create host configuration directories
##########################################################################################

    - name: Create DHCPD container configuration directory
      # mkdir -p /srv/docker/dhcpd
      # chmod 0777 /srv/docker/dhcpd
      file:
        state: directory
        path: "{{ item.config_directory }}"
        mode: 0777
      become: True
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'dhcpd') | list }}"
      tags:
        - create_dhcpd_config_dir
        - create_directory


    - name: Create rac node containers custom directories
      # mkdir -p /srv/docker/rac_nodes/custom_services
      # chmod 0777 /srv/docker/rac_nodes/custom_services
      file:
        state: directory
        path: "{{ operating_system.rac_node_directory }}"
        mode: 0777
      become: True
      tags:
        - create_rac_nodes_custom_dirs
        - create_directory


    - name: Create scripts directories
      # mkdir -p /srv/docker/scripts
      # chmod 0777 /srv/docker/scripts
      file:
        state: directory
        path: "{{ operating_system.scripts_directory }}"
        mode: 0777
      become: True
      tags:
        - create_scripts_dir
        - create_directory


    - name: Create NFS container configuration directory
      # mkdir -p /srv/docker/nfs
      # chmod 0777 /srv/docker/nfs
      file:
        state: directory
        path: "{{ item.config_directory }}"
        mode: 0777
      become: True
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'nfs') | list }}"
      tags:
        - create_nfs_config_dir
        - create_directory


    - name: Create installation file directories
      # mkdir -p /oracledata/stage/12.2.0
      # chmod 0777 /oracledata/stage/12.2.0
      file:
        state: directory
        path: "/oracledata/stage/{{ item.version }}"
        mode: 0777
      become: True
      with_items:
        - "{{ installation_files }}"
      tags:
        - create_installation_file_dirs
        - installation_files


##########################################################################################
#############  Copy container configuration files
##########################################################################################

    - name: Copy DHCPD container configuration file
      # cp dhcpd.conf /srv/docker/dhcpd/
      copy:
        src: "{{ item.config_file }}" 
        dest: "{{ item.config_directory }}/"
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'dhcpd') | list }}"
      tags:
        - copy_dhcpd_config_file
        - config_files


    - name: Copy NFS container configuration file
      # cp ganesha.conf /srv/docker/nfs/
      copy:
        src: "{{ item.config_file }}" 
        dest: "{{ item.config_directory }}/"
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'nfs') | list }}"
      tags:
        - copy_nfs_config_file
        - config_files


##########################################################################################
#############  Create supporting containers
##########################################################################################

    - name: Create BIND container
      # docker create --name bind --hostname bind --publish 53:53/tcp --publish 53:53/udp \
      #   --volume /srv/docker/bind:/data --env WEBMIN_ENABLED=false sethmiller/bind -4
      # docker network connect --ip 10.10.10.10 pub bind
      # docker start bind
      docker_container:
        name: bind
        hostname:  "{{ item.hostname }}"
        image: "{{ item.image }}"
        state: started
        published_ports:
          "{{ item.ports }}"
        volumes:
          "{{ item.volumes }}"
        networks:
          "{{ item.networks }}"
        env:
          "{{ item.env }}"
        command: "{{ item.command }}"
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'bind') | list }}"
      tags:
        - create_bind_container
        - create_container


    - name: Create DHCPD container
      # docker create --name dhcpd --hostname dhcpd --volume /srv/docker/dhcpd:/data \
      #   --volume /srv/docker/bind/bind/etc:/keys --dns 10.10.10.10 networkboot/dhcpd
      # docker network connect --ip 10.10.10.11 pub dhcpd 
      # docker network connect --ip 11.11.11.11 priv dhcpd
      # docker start dhcpd
      docker_container:
        name: dhcpd
        hostname:  "{{ item.hostname }}"
        image: "{{ item.image }}"
        state: started
        volumes:
          "{{ item.volumes }}"
        networks:
          "{{ item.networks }}"
        dns_servers:
          "{{ item.dns }}"
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'dhcpd') | list }}"
      tags:
        - create_dhcpd_container
        - create_container


    - name: Create NFS container
      # docker run --detach --privileged --name nfs --hostname nfs --volume /srv/docker/nfs:/etc/ganesha \
      #   --volume /oraclenfs:/oraclenfs --dns 10.10.10.10 sethmiller/nf
      # docker network connect --ip 10.10.10.12 pub nfs
      docker_container:
        name: nfs
        hostname:  "{{ item.hostname }}"
        image: "{{ item.image }}"
        state: started
        privileged: True
        volumes:
          "{{ item.volumes }}"
        networks:
          "{{ item.networks }}"
        dns_servers:
          "{{ item.dns }}"
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'nfs') | list }}"
      tags:
        - create_nfs_container
        - create_container
 

##########################################################################################
#############  Prepare Oracle installation files
##########################################################################################

#    - name: Download installation files only if they are not already present
#      get_url:
#        url: "{{ item.1.name }}"
#        dest: "/oracledata/stage/{{ item.1.name | basename }}"
#      become: True
#      with_subelements:
#        - "{{ installation_files }}"
#        - files
#      tags:
#        - download_installation_files
#        - installation_files
#
#
#    - name: Unzip installation files only if the 'creates' file does not already exist
#      unarchive:
#        src: "/oracledata/stage/{{ item.1.name | basename }}"
#        dest: "/oracledata/stage/{{ item.0.version }}/"
#        creates: "/oracledata/stage/{{ item.0.version }}/{{ item.1.creates }}"
#        remote_src: True
#        owner: "{{ operating_system.grid_infrastructure.users | selectattr('title', 'equalto', 'owner') | map(attribute='uid') | first }}"
#        group: "{{ operating_system.grid_infrastructure.groups | selectattr('title', 'equalto', 'inventory') | map(attribute='gid') | first }}"
#      become: True
#      with_subelements:
#        - "{{ installation_files }}"
#        - files
#      tags:
#        - unzip_installation_files
#        - installation_files
